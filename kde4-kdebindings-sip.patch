--- kdebindings/python/pykde4/sip/kdecore/typedefs.sip	2010/01/16 10:06:39	1075490
+++ kdebindings/python/pykde4/sip/kdecore/typedefs.sip	2010/09/01 15:31:50	1170602
@@ -733,61 +733,6 @@
 };
 
 
-%MappedType QList<uint>
-{
-%TypeHeaderCode
-#include <qlist.h>
-%End
-
-%ConvertFromTypeCode
-    // Create the list.
-    PyObject *l;
-
-    if ((l = PyList_New(sipCpp->size())) == NULL)
-        return NULL;
-
-    // Set the list elements.
-    for (int i = 0; i < sipCpp->size(); ++i) {
-        PyObject *pobj;
-
-#if PY_MAJOR_VERSION >= 3
-        if ((pobj = PyLong_FromLong(sipCpp->value(i))) == NULL) {
-#else
-        if ((pobj = PyInt_FromLong(sipCpp->value(i))) == NULL) {
-#endif
-            Py_DECREF(l);
-
-            return NULL;
-        }
-
-        PyList_SET_ITEM(l, i, pobj);
-    }
-
-    return l;
-%End
-
-%ConvertToTypeCode
-    // Check the type if that is all that is required.
-    if (sipIsErr == NULL)
-        return PyList_Check(sipPy);
-
-    QList<uint> *ql = new QList<uint>;
- 
-    for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i) {
-#if PY_MAJOR_VERSION >= 3
-        ql->append(PyLong_AsLong(PyList_GET_ITEM(sipPy, i)));
-#else
-        ql->append(PyInt_AsLong(PyList_GET_ITEM(sipPy, i)));
-#endif        
-    }
-    
-    *sipCppPtr = ql;
- 
-    return sipGetState(sipTransferObj);
-%End
-};
-
-
 template <TYPE*>
 %MappedType QStack<TYPE*>
 {
--- kdebindings-4.5.5/python/pykde4/sip/kdecore/typedefs.sip~	2011-01-10 19:51:15.525973439 +0100
+++ kdebindings-4.5.5/python/pykde4/sip/kdecore/typedefs.sip	2011-01-10 19:54:55.663714814 +0100
@@ -582,90 +582,6 @@
 %End
 };
 
-template <TYPE>
-%MappedType QSet<TYPE>
-{
-%TypeHeaderCode
-#include <qset.h>
-%End
-
-%ConvertFromTypeCode
-    // Create the list.
-    PyObject *l;
-
-    if ((l = PyList_New(sipCpp->size())) == NULL)
-        return NULL;
-
-    // Set the list elements.
-    QSet<TYPE> set = *sipCpp;
-    int i = 0;
-    foreach (TYPE value, set)
-    {
-        PyObject *obj = sipConvertFromNewType(&value, sipType_TYPE, sipTransferObj);
-        if (obj == NULL || PyList_SET_ITEM (l, i, obj) < 0)
-        {
-            Py_DECREF(l);
-
-            if (obj)
-                Py_DECREF(obj);
-
-            return NULL;
-        }
-
-        Py_DECREF(obj);
-        i++;
-    }
-   
-    return l;
-%End
-
-%ConvertToTypeCode
-    // Check the type if that is all that is required.
-    if (sipIsErr == NULL)
-    {
-        if (!PyList_Check(sipPy))
-            return 0;
-    }
-
-    // Check the type if that is all that is required.
-    if (sipIsErr == NULL)
-    {
-        if (!PyList_Check(sipPy))
-            return 0;
-
-        for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
-            if (!sipCanConvertToType(PyList_GET_ITEM (sipPy, i), sipType_TYPE, SIP_NOT_NONE))
-                return 0;
-    }
-
-    QSet<TYPE> *qs = new QSet<TYPE>;
- 
-    for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
-    {
-        int state;
-
-        TYPE *t = reinterpret_cast<TYPE *>(sipConvertToType(PyList_GET_ITEM (sipPy, i), sipType_TYPE, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));
- 
-        if (*sipIsErr)
-        {
-            sipReleaseType(t, sipType_TYPE, state);
-
-            delete qs;
-            return 0;
-        }
-
-        *qs << *t;
-
-        sipReleaseType(t, sipType_TYPE, state);
-    }
- 
-    *sipCppPtr = qs;
- 
-    return sipGetState(sipTransferObj);
-%End
-};
-
-
 template <TYPE1,TYPE2>
 %MappedType QPair<TYPE1,TYPE2>
 {

